Overview:
C# is an OOP language created by Microsoft. It runs on the .NET framework. The first version was released in 2002. It is similar to Java, and has roots in the C family of languages.


C# Syntax:

using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

"using System" - means we can use classes from the "System" namespace. 

What is a Namespace? According to Microsoft, the namespace keyword is used to declare a scope that contains a set of related objects. Namespaces organize and provide a level of separation of code. Programiz states that they can be considered as a container which consists of other namespaces. A namespace keeps one set of names separate from another. W3 says that a namespace is used to organize your code, and it is a container for classes and other namespaces. 

C# ignores whitespace, but multiple lines are good for readability. 

Curly braces mark the beginning and end of a block of code.

Every line of C# must be inside a class (in this case, the name of the class is Program).

Every C# program has a Main method, and the code inside it's {} will be executed.

Console is a class in the System namespace, which has a WriteLine() method used to output/print text. Without the "using" keyword (which seems to be kind of like import?) you would have to write System.Console.WriteLine();

NB 
- C# is case-sentisitive. 
- Every line must end with a semicolon.
- The name of the C# file doesn't have to match classname (unlike Java), but they often do. 


Write vs WriteLine method: WriteLine() will insert a new line after the call, and the Write() method will not. 

You can use Write() or WriteLine() like .log in JS, in the sense that it can do calculations as well as just print strings/arrays/objects, etc to the console.


C# Variables:

variable types:
- int (stores whole numbers)
- double (stores floating point numbers with 2 decimal places, it seems)
- char (stores single character, surrounded by single quotes)
- string (stores text, "surrounded by double quotes")
- bool (boolean)

Declaring variable syntax:
type variableName = value;

You can also declare a variable without assigning it a value, and assign a value to it later!

To make a constant variable, you insert const in front of the type of your variable. This results in a read only variable.

You can also declare multiple variables of the same type at the same time, as comma separated values. 
ex: int x = 5, y = 3, z = 13;
to assign mutliple variables to the same value:
int x, y, z;
x = y = z = 50;


C# Identifiers 

All C# variables must have unique names, which are called identifiers (this makes complete sense).
