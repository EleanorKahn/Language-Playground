Overview:
C# is an OOP language created by Microsoft. It runs on the .NET framework. The first version was released in 2002. It is similar to Java, and has roots in the C family of languages.


C# Syntax:

using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

"using System" - means we can use classes from the "System" namespace. 

What is a Namespace? According to Microsoft, the namespace keyword is used to declare a scope that contains a set of related objects. Namespaces organize and provide a level of separation of code. Programiz states that they can be considered as a container which consists of other namespaces. A namespace keeps one set of names separate from another. W3 says that a namespace is used to organize your code, and it is a container for classes and other namespaces. 

C# ignores whitespace, but multiple lines are good for readability. 

Curly braces mark the beginning and end of a block of code.

Every line of C# must be inside a class (in this case, the name of the class is Program).

Every C# program has a Main method, and the code inside it's {} will be executed.

Console is a class in the System namespace, which has a WriteLine() method used to output/print text. Without the "using" keyword (which seems to be kind of like import?) you would have to write System.Console.WriteLine();

NB 
- C# is case-sentisitive. 
- Every line must end with a semicolon.
- The name of the C# file doesn't have to match classname (unlike Java), but they often do. 


Write vs WriteLine method: WriteLine() will insert a new line after the call, and the Write() method will not. 

You can use Write() or WriteLine() like .log in JS, in the sense that it can do calculations as well as just print strings/arrays/objects, etc to the console.


C# Variables:

variable types:
- int (stores whole numbers)
- double (stores floating point numbers with 2 decimal places, it seems)
- char (stores single character, surrounded by single quotes)
- string (stores text, "surrounded by double quotes")
- bool (boolean)

Declaring variable syntax:
type variableName = value;

You can also declare a variable without assigning it a value, and assign a value to it later!

To make a constant variable, you insert const in front of the type of your variable. This results in a read only variable.

You can also declare multiple variables of the same type at the same time, as comma separated values. 
ex: int x = 5, y = 3, z = 13;
to assign mutliple variables to the same value:
int x, y, z;
x = y = z = 50;


C# Identifiers 

All C# variables must have unique names, which are called identifiers (this makes complete sense).



C# Strings
As in JS, strings in C# are objects, and have properties and methods. 

to get the length of the string, access the string.Length property.

Strings can be made upper/lowercase with the string.ToUpper() and string.ToLower() methods. These return a copy of the original string.

The + operator can be used to concat strings. You can also use the string.Concat() method.

NB - the + operator can be either addition or concat. Strings are concat, and numbers are added.

Like string literals, you can perform string interpolation by using the $ sign. ex: string name = $"My full name is: {firstName} {lastName}";

To access a specific char in a string, you can use square brackets with the index of that char. ex: string name = "Pete"; name[2] would return t. You can also use the IndexOf() method, which will return a number indicating the index of a given char. 

string.Substring(specifiedIndexToStart) returns a new substring starting from a specified index.

Note - to include special characters in strings, you must escape them using a \ before the character.


Collections in C#:
Collection classes are special classes for storing and retrieving data. Interesting - it looks like you use the same "using" syntax as with System, except that it looks like "using System.Collections;"


ArrayList: represents an ordered collection of objects that can be indexed. You can add and remove items from a list at specified positions using index, and the arraylist will resize automatically (unlike arrays). Also allows dynamic memory allocation, searching, sorting items in the list. can use .Sort() method. To add to an arraylist: ArrayList al = new ArrayList(); al.Add(2); adds the number 2 to our new arraylist al.

HashTable:
HashTable is a class. Represents a collection of data by key value pairs, and the key is used to access that value. 

ex:
Hashtable ht = new Hashtable();

ht.Add("001", "Fred Jones");
ht.Add("002", "Rebecca Smith");

to check if a HashTable contains a value, use the ht.ContainsValue("value") method.

To get a collection of just the keys of a HashTable, use the ICollection key = ht.Keys; property. ICollection is the type of this variable?


Stacks:
last-in-first-out principal, like loading/unloading a car. 

ex: Stack stack = new Stack();

stack.Push("A");
stack.Push("B");

The Push() method adds values to the front of the stack. 

stack.Pop(); removes values from the front of an array. 

Queue:
A queue represents a first-in-first-out, exactly like a line in a grocery store. 

Queue q = new Queue();
q.Enqueue("A");
q.Enqueue("B");

//This one is worth looking up
char ch = (char)q.Dequeue(); 

Arrays in C#:
type[] name;
example: string[] cars;

string[] cars = {"car1", "car2", "car3"};

int[] myNumber = {10, 20, 30};

You can access the elements in an array with square bracket notation: myNumber[0] = 10;
To change the value of an element, you can simply reassign it: cars[0] = cars5;