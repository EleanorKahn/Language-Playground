History:
Java was created in 1995, and is currently owned by Oracle. 

Java is close to C++ and C#, which is useful for programmers who use all 3. 

Java is case-sensitive.

Java code statements must end with a semicolon;

You may have to install Java on your device. 


Java Fundamentals:

In Java, every app begins with a class name which must match the filename. 

Java Syntax:
example:
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello Word");
    }
}

EVERY line of Java must be inside a class (our class is called Main), and the name of the java file MUST match the class name. 

The main() Method:
main() method is required in every Java program. 
public static void main(String[] args)
where any code inside the main() method gets executed. 

System.out.println() will print whatever you put inside the parantheses to the screen. 


Java Output / Print 
The println() method 

The System.out.println() method will print values or text, and will also add a new line for each method call. System.out.print() will NOT add a new line, but works otherwise the same. If you include text inside (as opposed to a string variable) it must be wrapped in double quotes. You can also perform mathmatical calculations inside the the println() method.


Comments in Java:

Comments in Java seem to work exactly how they do in JS, which is helpful. It also seems like C# comments are identical. 


Variables in Java
variable types:
- String (surrounded by DOUBLE QUOTES)
- int (whole numbers)
- float (stores floating point numbers, with decimals, maybe just 2, although I doubt it?)
- char (single characters, surrounded by SINGLE QUOTES)
- boolean 

to declare a variable, you specify type and assign it a value.
ex: type variableName = value;

NB - String seems to be the only type of variable whose type name is capitalized. 

variables can be reassigned by default, and if you find that you want a read-only variable, you use the "final" keyword.
ex: final int myNum = 14;
myNum will always equal 14.

You can declare multiple variables of the same type at the same time using the following syntax:
int x = 5, y = 6, z = 50;

to assign same time variables to the same value, you can use the following syntax:
int x, y, z;
x = y = z = 50;


Java Identifiers:
All Java variables must be identified with unique names, and these unique names are called identifiers. 


Java Data Types:
primative types include:
- byte
- short
- int
- long 
- float 
- double 
- boolean 
- char

non-primitive types include:
- String, Arrays, and Classes (okay, so looks like non-primitive types get their names capitalized).


Java Strings:

Strings contain a collection of characters surrounded by double quotes.

To make a string all upper or lower case, you can use the .toUpperCase() or toLowerCase() methods respectively. 

To find a character in a string, you can use the .indexOf("string") method, which will return an int which represents the position of the first occurence of that specified text.

You can use the + operator to combine strings, and you can also use the str1.concat(str2) method. If you use the + operator to concat a number and a string, the result will be a number! Like C#, you use the \ to escape characters you want to use in a string (escape characters).

str.charAt(number) returns the char at the index represented by the number.

str.compareTo(str2) compares two strings lexicographically (ie the order in which they appear in the dictionary)

str.contains(str2) returns a boolean.

str.equals(str2) returns a boolean, and str.equalsIgnoreCase(str2) does the same but without case considerations.




Random: 
- methods used to obtain info about an object are called accessor methods (think str.length())